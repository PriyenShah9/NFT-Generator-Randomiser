{"ast":null,"code":"var _jsxFileName = \"/Users/uelpalmer/nftBoiler/NFT_Spring2022/nft-minter/src/components/MetaMaskAuth.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nasync function connect(onConnected) {\n  if (!window.ethereum) {\n    alert(\"Get MetaMask!\");\n    return;\n  }\n\n  const accounts = await window.ethereum.request({\n    method: \"eth_requestAccounts\"\n  });\n  onConnected(accounts[0]); // this function connect the user to metamask. \n}\n\nfunction Connect(_ref) {\n  let {\n    setUserAddress\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: () => connect(setUserAddress),\n    children: \"Connect to MetaMask\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 7\n  }, this);\n}\n\n_c = Connect;\n\nfunction Address(_ref2) {\n  let {\n    userAddress\n  } = _ref2;\n  return /*#__PURE__*/_jsxDEV(\"span\", {\n    children: [userAddress.substring(0, 5), \"\\u2026\", userAddress.substring(userAddress.length - 4)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 7\n  }, this);\n}\n\n_c2 = Address;\n\nasync function checkIfWalletIsConnected(onConnected) {\n  if (window.ethereum) {\n    const accounts = await window.ethereum.request({\n      method: \"eth_accounts\"\n    });\n\n    if (accounts.length > 0) {\n      const account = accounts[0];\n      onConnected(account);\n      return;\n    }\n  }\n}\n\nexport default function MetaMaskAuth(_ref3) {\n  _s();\n\n  let {\n    onAddressChanged\n  } = _ref3;\n  const [userAddress, setUserAddress] = useState(\"\");\n  useEffect(() => {\n    checkIfWalletIsConnected(setUserAddress);\n  }, []);\n  useEffect(() => {\n    onAddressChanged(userAddress);\n  }, [userAddress]);\n  return userAddress ? /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Connected with \", /*#__PURE__*/_jsxDEV(Address, {\n      userAddress: userAddress\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 22\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this) : /*#__PURE__*/_jsxDEV(Connect, {\n    setUserAddress: setUserAddress\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 6\n  }, this);\n}\n\n_s(MetaMaskAuth, \"0toQO+/F35Cm8qbGWwd8kIJqapY=\");\n\n_c3 = MetaMaskAuth;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Connect\");\n$RefreshReg$(_c2, \"Address\");\n$RefreshReg$(_c3, \"MetaMaskAuth\");","map":{"version":3,"sources":["/Users/uelpalmer/nftBoiler/NFT_Spring2022/nft-minter/src/components/MetaMaskAuth.js"],"names":["React","useEffect","useState","connect","onConnected","window","ethereum","alert","accounts","request","method","Connect","setUserAddress","Address","userAddress","substring","length","checkIfWalletIsConnected","account","MetaMaskAuth","onAddressChanged"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;;;AAGA,eAAeC,OAAf,CAAuBC,WAAvB,EAAoC;AAChC,MAAI,CAACC,MAAM,CAACC,QAAZ,EAAsB;AACpBC,IAAAA,KAAK,CAAC,eAAD,CAAL;AACA;AACD;;AAED,QAAMC,QAAQ,GAAG,MAAMH,MAAM,CAACC,QAAP,CAAgBG,OAAhB,CAAwB;AAC7CC,IAAAA,MAAM,EAAE;AADqC,GAAxB,CAAvB;AAIAN,EAAAA,WAAW,CAACI,QAAQ,CAAC,CAAD,CAAT,CAAX,CAVgC,CAUN;AAC7B;;AAED,SAASG,OAAT,OAAqC;AAAA,MAApB;AAAEC,IAAAA;AAAF,GAAoB;AACjC,sBACE;AAAQ,IAAA,OAAO,EAAE,MAAMT,OAAO,CAACS,cAAD,CAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAKD;;KANMD,O;;AAOT,SAASE,OAAT,QAAkC;AAAA,MAAjB;AAAEC,IAAAA;AAAF,GAAiB;AAC9B,sBACE;AAAA,eAAOA,WAAW,CAACC,SAAZ,CAAsB,CAAtB,EAAyB,CAAzB,CAAP,YAAqCD,WAAW,CAACC,SAAZ,CAAsBD,WAAW,CAACE,MAAZ,GAAqB,CAA3C,CAArC;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAGH;;MAJQH,O;;AAOT,eAAeI,wBAAf,CAAwCb,WAAxC,EAAqD;AACjD,MAAIC,MAAM,CAACC,QAAX,EAAqB;AACnB,UAAME,QAAQ,GAAG,MAAMH,MAAM,CAACC,QAAP,CAAgBG,OAAhB,CAAwB;AAC7CC,MAAAA,MAAM,EAAE;AADqC,KAAxB,CAAvB;;AAIA,QAAIF,QAAQ,CAACQ,MAAT,GAAkB,CAAtB,EAAyB;AACvB,YAAME,OAAO,GAAGV,QAAQ,CAAC,CAAD,CAAxB;AACAJ,MAAAA,WAAW,CAACc,OAAD,CAAX;AACA;AACD;AACF;AACF;;AAGH,eAAe,SAASC,YAAT,QAA4C;AAAA;;AAAA,MAAtB;AAAEC,IAAAA;AAAF,GAAsB;AACzD,QAAM,CAACN,WAAD,EAAcF,cAAd,IAAgCV,QAAQ,CAAC,EAAD,CAA9C;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACdgB,IAAAA,wBAAwB,CAACL,cAAD,CAAxB;AACD,GAFQ,EAEN,EAFM,CAAT;AAIAX,EAAAA,SAAS,CAAC,MAAM;AACdmB,IAAAA,gBAAgB,CAACN,WAAD,CAAhB;AACD,GAFQ,EAEN,CAACA,WAAD,CAFM,CAAT;AAIA,SAAOA,WAAW,gBAChB;AAAA,+CACiB,QAAC,OAAD;AAAS,MAAA,WAAW,EAAEA;AAAtB;AAAA;AAAA;AAAA;AAAA,YADjB;AAAA;AAAA;AAAA;AAAA;AAAA,UADgB,gBAKf,QAAC,OAAD;AAAS,IAAA,cAAc,EAAEF;AAAzB;AAAA;AAAA;AAAA;AAAA,UALH;AAOD;;GAlBuBO,Y;;MAAAA,Y","sourcesContent":["import React, { useEffect, useState } from \"react\";\n\n\nasync function connect(onConnected) { \n    if (!window.ethereum) {\n      alert(\"Get MetaMask!\");\n      return;\n    }\n  \n    const accounts = await window.ethereum.request({\n      method: \"eth_requestAccounts\",\n    });\n  \n    onConnected(accounts[0]); // this function connect the user to metamask. \n}\n\nfunction Connect({ setUserAddress }) {\n    return (\n      <button onClick={() => connect(setUserAddress)}>\n        Connect to MetaMask\n      </button>\n    );\n  }\nfunction Address({ userAddress }) {\n    return (\n      <span>{userAddress.substring(0, 5)}â€¦{userAddress.substring(userAddress.length - 4)}</span>\n);\n}\n\n\nasync function checkIfWalletIsConnected(onConnected) {\n    if (window.ethereum) {\n      const accounts = await window.ethereum.request({\n        method: \"eth_accounts\",\n      });\n  \n      if (accounts.length > 0) {\n        const account = accounts[0];\n        onConnected(account);\n        return;\n      }\n    }\n  }\n\n\nexport default function MetaMaskAuth({ onAddressChanged }) {\n  const [userAddress, setUserAddress] = useState(\"\");\n\n  useEffect(() => {\n    checkIfWalletIsConnected(setUserAddress);\n  }, []);\n\n  useEffect(() => {\n    onAddressChanged(userAddress);\n  }, [userAddress]);\n\n  return userAddress ? (\n    <div>\n      Connected with <Address userAddress={userAddress} />\n    </div>\n  ) : (\n     <Connect setUserAddress={setUserAddress}/>\n  );\n}"]},"metadata":{},"sourceType":"module"}